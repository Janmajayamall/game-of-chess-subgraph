type Game @entity {
	id: ID! # gameId
	gameId: Int!
	fenString: String!
	state: Int!
	side: Int!
	winner: Int!
	enpassantSq: BigInt!
	moveCount: Int!
	bkC: Boolean!
	bqC: Boolean!
	wkC: Boolean!
	wqC: Boolean!
}

type Market @entity {
	id: ID! # moveValue
	moveValue: BigInt!
	game: Game!
	gameId: Int!
	moveCount: Int!

	sourceSq: BigInt!
	targetSq: BigInt!

	moveBySq: BigInt!
	sourcePiece: BigInt!
	targetPiece: BigInt!
	promotedToPiece: BigInt!
	moveFlag: BigInt!

	chosenMove: Boolean!

	tradeVolume: BigDecimal!
	tradesCount: BigInt!

	# outcome tokens ids
	oToken0Id: BigInt!
	oToken1Id: BigInt!

	users: [UserMarket!]! @derivedFrom(field: "market")
}

type TokenBalance @entity {
	id: ID! # {user}-{tokenId}
	tokenId: BigInt!
	user: User!
	market: Market!
	balance: BigDecimal!
}

type User @entity {
	id: ID!
	markets: [UserMarket!]! @derivedFrom(field: "user")
}

type UserMarket @entity {
	id: ID! # {user}-{moveValue}
	user: User!
	market: Market!
}

type TradeHistory @entity {
	id: ID! # {user}-{moveValue}
	user: User!
	market: Market!
	amountC: BigDecimal!
	amount0: BigDecimal!
	amount1: BigDecimal!
	buy: Boolean!
	tradeIndex: BigInt!
	timestamp: BigInt!
}
